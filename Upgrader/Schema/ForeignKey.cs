namespace Upgrader.Schema
{
    /// <summary>
    /// Represents a new foreign key in the database.
    /// </summary>
    public class ForeignKey
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForeignKey"/> class with a reference to a local column name and a foreign table name. Foreign key name will be generated by convention.
        /// </summary>
        /// <param name="columnName">Column name matching column in both the local and the foreign table.</param>
        /// <param name="foreignTableName">Foreign table name</param>
        public ForeignKey(string columnName, string foreignTableName) : this(new[] { columnName }, foreignTableName, new[] { columnName })
        {            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForeignKey"/> class with a reference to local column names, a foreign table name with a specified foreign key name.
        /// </summary>
        /// <param name="columnNames">Column names matching columns in both the local and the foreign table.</param>
        /// <param name="foreignTableName">Foreign table name.</param>
        /// <param name="foreignKeyName">Foreign key name. If not name is given, name is set by convention.</param>
        public ForeignKey(string[] columnNames, string foreignTableName, string foreignKeyName = null) : this(columnNames, foreignTableName, columnNames, foreignKeyName)
        {            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForeignKey"/> class with a reference to a local column name, a foreign table name, a foreign column name and a specified foreign key name.
        /// </summary>
        /// <param name="columnName">Column name in the local table.</param>
        /// <param name="foreignTableName">Foreign table name.</param>
        /// <param name="foreignColumnName">Column name in the foreign table.</param>
        /// <param name="foreignKeyName">Foreign key name. If not name is given, name is set by convention.</param>
        public ForeignKey(string columnName, string foreignTableName, string foreignColumnName, string foreignKeyName = null) : this(new[] { columnName }, foreignTableName, new[] { foreignColumnName }, foreignKeyName)
        {            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForeignKey"/> class with a reference to a local column name, a foreign table name with a specified foreign key name.
        /// </summary>
        /// <param name="columnNames">Column names in the local table.</param>
        /// <param name="foreignTableName">Foreign table name.</param>
        /// <param name="foreignColumnNames">Column names in the foreign table.</param>
        /// <param name="foreignKeyName">Foreign key name. If not name is given, name is set by convention.</param>
        public ForeignKey(string[] columnNames, string foreignTableName, string[] foreignColumnNames, string foreignKeyName = null)
        {
            ForeignKeyName = foreignKeyName;
            ForeignTableName = foreignTableName;
            ColumnNames = columnNames;
            ForeignColumnNames = foreignColumnNames;
        }

        /// <summary>
        /// Gets the foreign key name.
        /// </summary>
        public string ForeignKeyName { get; }

        /// <summary>
        /// Gets the foreign table name.
        /// </summary>
        public string ForeignTableName { get; }

        /// <summary>
        /// Gets the local column names.
        /// </summary>
        public string[] ColumnNames { get; }

        /// <summary>
        /// Gets the foreign column names.
        /// </summary>
        public string[] ForeignColumnNames { get; }
    }
}
